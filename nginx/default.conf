map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

# HTTP server (redirects to HTTPS)
# HTTPS server with reverse proxy
server {
    listen 443 ssl;
    server_name localhost;

    ssl_certificate /etc/nginx/conf/server.crt;
    ssl_certificate_key /etc/nginx/conf/server.key;

    # TLS best practices
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers off;

    location /api/ {
        proxy_pass http://172.18.0.3:5000;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Optional WebSocket support (for future use)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        # CORS headers (optional, you can keep them in Flask too)
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
        add_header Access-Control-Allow-Headers 'Origin, Content-Type, Accept, Authorization';
    }

    # Serve frontend (optional)
    location / {
        root /usr/share/nginx/html;
        index index.html;
    }
}
server {
    listen 80;
    server_name 192.168.0.186;

    location /api/ {
        proxy_pass http://172.18.0.3:5000;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
