# Enable ModSecurity
SecRuleEngine On

# Set audit log location
SecAuditEngine RelevantOnly
SecAuditLog /var/log/modsecurity/modsec_audit.log
SecAuditLogParts ABIJDEFHZ
SecAuditLogType Serial

# Basic settings
SecRequestBodyAccess On
SecResponseBodyAccess Off
SecRequestBodyLimit 13107200
SecRequestBodyNoFilesLimit 131072
#SecRequestBodyInMemoryLimit 131072
SecPcreMatchLimit 100000
SecPcreMatchLimitRecursion 100000
SecRule REQUEST_HEADERS:Content-Type "text/xml" \
    "id:200000,phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=XML"

# Logging level
SecDebugLog /var/log/modsecurity/modsec_debug.log
SecDebugLogLevel 0

# IP collection (optional rate limiting)
SecCollectionTimeout 600

# OWASP CRS inclusion
Include /etc/modsecurity/crs-setup.conf
Include /etc/modsecurity/rules/*.conf

# === Custom rules for your Flask APIs ===

# Block suspicious login attempts
SecRule REQUEST_URI "@beginsWith /api/login" "phase:2,deny,status:403,id:1001,log,msg:'Suspicious login payload',chain"
  SecRule ARGS:email|ARGS:password "@rx (?i)(\bor\b|\band\b|=|--|#|;|%27|%22|%3D|%2D{2,})"

# Block SQL injection patterns in API endpoints
SecRule REQUEST_URI "@beginsWith /api/" "phase:2,deny,status:403,id:1002,log,msg:'Possible SQL Injection in API',chain"
  SecRule ARGS|ARGS_NAMES "@rx (?i)(union(\s)+select|select.+from|insert(\s)+into|drop\s+table|or\s+1=1)"

# Optional: Basic rate limiting (abuse prevention)
SecAction "id:1003,phase:1,nolog,pass,initcol:ip=%{REMOTE_ADDR},setvar:ip.req_counter=+1,expirevar:ip.req_counter=60"
SecRule IP:req_counter "@gt 50" "phase:1,deny,status:429,id:1004,log,msg:'Rate limit exceeded (50 req/min)'"

# Health check exception (no blocking)
SecRule REQUEST_URI "@beginsWith /api/health" "id:1005,phase:1,pass,nolog,ctl:ruleEngine=Off"
